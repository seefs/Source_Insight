macro DeleteNvmIdRange(hbuf, fromI, toI){	var lnMax	var curI	var headR	var tailR	var cur_line	var searchStr	var mSel	curI = toI	while (curI >= fromI)	{		searchStr = "ITEM_INDEX   = " # curI # "$"		mSel = SearchInBuf(hbuf, searchStr, 0, 0, FALSE, TRUE, FALSE)		if(mSel != "")		{			lnMax = GetBufLineCount(hbuf)			headR = mSel.lnLast			while (headR > 0)			{				headR = headR - 1				cur_line = GetBufLine(hbuf, headR)				if(FindString( cur_line, "BEGIN_ITEM" ) != "X")				{					break				}			}			tailR = mSel.lnLast			while (tailR < lnMax)			{				tailR = tailR + 1				cur_line = GetBufLine(hbuf, tailR)				if(FindString( cur_line, "END_ITEM" ) != "X")				{					break				}			}			if(StartWS( GetBufLine(hbuf, tailR + 1), 0 ) == "X")			{				tailR = tailR + 1			}			if(tailR - headR < 20)			{				while (tailR >= headR)				{					DelBufLine(hbuf, tailR)					tailR = tailR - 1				}			}		}		curI = curI - 1	}	SaveBuf(hbuf)	return 0}macro IsExistNvmName(hbuf, nameNv){	var searchStr	var mSel	searchStr = "ITEM_NAME    = " # nameNv # "$"	mSel = SearchInBuf(hbuf, searchStr, 0, 0, FALSE, TRUE, FALSE)	if(mSel != "")	{		return 1	}	return 0}macro AddNvmFileToLast(hbuf, lastI, baseVal, subFile){	var lnMax	var curI	var tailR	var cur_line	var searchStr	var mSel	// patch	var patchBuf	var plnMax	searchStr = "ITEM_INDEX   = " # lastI # "$"	mSel = SearchInBuf(hbuf, searchStr, 0, 0, FALSE, TRUE, FALSE)	if(mSel != "")	{		lnMax = GetBufLineCount(hbuf)		tailR = mSel.lnLast		while (tailR < lnMax)		{			tailR = tailR + 1			cur_line = GetBufLine(hbuf, tailR)			if(FindString( cur_line, "END_ITEM" ) != "X")			{				break			}		}		if(StartWS( GetBufLine(hbuf, tailR + 1), 0 ) == "X")		{			tailR = tailR + 1		}		if(tailR < lnMax)		{			patchBuf = OpenCache(baseVal # "\\" # subFile)			if (patchBuf != hNil){				plnMax = GetBufLineCount(patchBuf)				//put data				curI = 0				while (curI < plnMax)				{					InsBufLine(hbuf, tailR++, GetBufLine(patchBuf, curI++))				}			}		}	}	SaveBuf(hbuf)	return 0}macro GetNvmNameRow(hbuf, curName, lnStart){	var searchStr	var mSel	searchStr = "ITEM_NAME    = " # curName # "$"	mSel = SearchInBuf(hbuf, searchStr, lnStart, 0, FALSE, TRUE, FALSE)	if(mSel != "")	{		return mSel.lnLast	}	return 0}macro GetNvmIndexRow(hbuf, curI, lnStart){	var searchStr	var mSel	searchStr = "ITEM_INDEX   = " # curI # "$"	mSel = SearchInBuf(hbuf, searchStr, lnStart, 0, FALSE, TRUE, FALSE)	if(mSel != "")	{		return mSel.lnLast	}	return 0}macro ParseNvmItem(hbuf, seachRow){	var ret	var lnMax	var headR	var tailR	var curI	var cur_line	var wr_mar	var wr_val	ret = 1	lnMax = GetBufLineCount(hbuf)	headR = seachRow	while (headR > 0)	{		headR = headR - 1		cur_line = GetBufLine(hbuf, headR)		if(FindString( cur_line, "BEGIN_ITEM" ) != "X")		{			break		}	}	tailR = seachRow	while (tailR < lnMax)	{		tailR = tailR + 1		cur_line = GetBufLine(hbuf, tailR)		if(FindString( cur_line, "END_ITEM" ) != "X")		{			break		}	}//	if(StartWS( GetBufLine(hbuf, tailR + 1), 0 ) == "X")//	{//		tailR = tailR + 1//	}	if(tailR - headR < 20)	{		SetReg("ITEM_INDEX", "")		SetReg("ROW_HEAD", headR)		SetReg("ROW_TAIL", tailR)		curI = headR + 1		while (curI < tailR)		{			cur_line = GetBufLine(hbuf, curI)			wr_mar = GetLineMacro(cur_line)			wr_val = GetLineValue(cur_line)			if (wr_mar == "ITEM_SIZE"){				SetReg("ITEM_SIZE", wr_val)				SetReg("ROW_SIZE", curI)			}			else if (wr_mar == "ITEM_INDEX"){				SetReg("ITEM_INDEX", wr_val)				SetReg("ROW_INDEX", curI)			}			else if (wr_mar == "ITEM_PARENT"){				SetReg("ITEM_PARENT", wr_val)				SetReg("ROW_PARENT", curI)			}			else if (wr_mar == "ITEM_NAME"){				SetReg("ITEM_NAME", wr_val)				SetReg("ROW_NAME", curI)			}			else if (wr_mar == "ITEM_ID" || wr_mar == "ITEM_TYPE" || wr_mar == "ITEM_CONTENT" || wr_mar == "ITEM_DESC"){				//			}			else			{				msg("parse error:" # wr_mar # " row:" # curI)			}			curI = curI + 1		}		ret = 0	}	SaveBuf(hbuf)	return ret}macro UpdateNvmAutoIdRange(hbuf, lnStart, fromI, toI, newfromI, newtoI, parentfromI, parenttoI){	var curI//	var cur_line	var new_line	var newI	var op_num	var mSearchRow	var mRet	//避免重复操作	if (lnStart > 0){		//如果row:30187是ID:3010的item		mRet = ParseNvmItem(hbuf, lnStart)		if (GetReg("ITEM_INDEX") != fromI){			msg("first item error: " # GetReg("ROW_INDEX") # ":"  # fromI # "/"  # GetReg("ITEM_INDEX") # CharFromKey(13))			return 1;		}		mSearchRow = lnStart	}	//base	SetReg("parent_lv1_from", fromI)	SetReg("parent_lv1_to", newfromI)	curI = fromI	op_num = fromI	while (curI <= toI)	{		if (curI - op_num > 100){			op_num = curI			SaveBuf(hbuf)		}		newI = curI - fromI + newfromI		mSearchRow = GetNvmIndexRow(hbuf, curI, mSearchRow-1)		if (mSearchRow > 0){			mRet = ParseNvmItem(hbuf, mSearchRow)			if (mRet == 0)			{				//update index				new_line = "    ITEM_INDEX   = " # newI	//			msg("AutoId " # CharFromKey(13)	//					# GetReg("ROW_INDEX") # ":"  # CharFromKey(13)	//					# GetBufLine(hbuf, GetReg("ROW_INDEX")) # CharFromKey(13)	//					# new_line)				PutBufLine(hbuf, GetReg("ROW_INDEX"), "@new_line@")				//update parent				if (GetReg("ITEM_PARENT") == parentfromI){					SetReg("parent_lv1_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv1_to", newI)					//no do	//				msg("AutoId1 no do" # CharFromKey(13))					if (parenttoI > 0){						new_line = "    ITEM_PARENT  = " # parenttoI						PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")					}				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv1_from")){					SetReg("parent_lv2_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv2_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv1_to")	//				msg("AutoId2 " # CharFromKey(13)	//						# GetReg("ROW_PARENT") # ":"  # CharFromKey(13)	//						# GetReg("ITEM_PARENT") # CharFromKey(13)	//						# GetBufLine(hbuf, GetReg("ROW_PARENT")) # CharFromKey(13)	//						# new_line)					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv2_from")){					SetReg("parent_lv3_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv3_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv2_to")	//				msg("AutoId3 " # CharFromKey(13)	//						# GetReg("ROW_PARENT") # ":"  # CharFromKey(13)	//						# GetBufLine(hbuf, GetReg("ROW_PARENT")) # CharFromKey(13)	//						# new_line)					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv3_from")){					SetReg("parent_lv4_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv4_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv3_to")					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv4_from")){					SetReg("parent_lv5_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv5_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv4_to")					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv5_from")){					SetReg("parent_lv6_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv6_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv5_to")					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv6_from")){					SetReg("parent_lv7_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv7_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv6_to")					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv7_from")){					SetReg("parent_lv8_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv8_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv7_to")					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else if (GetReg("ITEM_PARENT") == GetReg("parent_lv9_from")){					SetReg("parent_lv10_from", GetReg("ITEM_INDEX"))					SetReg("parent_lv10_to", newI)					//do					new_line = "    ITEM_PARENT  = " # GetReg("parent_lv9_to")					PutBufLine(hbuf, GetReg("ROW_PARENT"), "@new_line@")				}				else				{					msg("parent error " # CharFromKey(13)							# GetReg("ROW_PARENT") # ":"  # CharFromKey(13)							# GetBufLine(hbuf, GetReg("ROW_PARENT")))				}			}		}		else		{			msg("search error! " # mSearchRow)			break		}		curI = curI + 1	}	return 0}macro UpdateNvmArraySizeById(hbuf, curI, fromSize, toSize){	var mSearchRow	var mRet	var new_line	mSearchRow = GetNvmIndexRow(hbuf, curI, 0)	if (mSearchRow > 0){		mRet = ParseNvmItem(hbuf, mSearchRow)		if (mRet == 0)		{			if (GetReg("ITEM_SIZE") == fromSize){				//do				new_line = "    ITEM_SIZE    = " # toSize				PutBufLine(hbuf, GetReg("ROW_SIZE"), "@new_line@")			}		}	}}