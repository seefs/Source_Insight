macro getBookmarkPath(0)	{  	       return  getKeyHead(0, "bookmark")	}macro getDebugString(0)	        {  	       return  "csv_debug"			    }macro getColumnName(0)	        {  	       return  "bookmark_name"			}macro getColumnUrl(0) 	       	{  	       return  "bookmark_url"			}macro getColumnPath(0) 	       	{  	       return  "bookmark_Path"			}macro getColumnAlias(0)	        {  	       return  "bookmark_alias"			}macro getColumnKey(0) 		    {  	       return  "bookmark_key"			}macro getColumnLevel(0) 	    {  	       return  "bookmark_level"			}macro getColumnNmLen(0)	 	    {  	       return  "bookmark_name_len"		}macro getColumnMap(0) 	       	{  	       return  "bookmark_map"			}macro getColumnCloud(0) 	   	{  	       return  "bookmark_cloud"			}macro getColumnState(0) 	   	{  	       return  "bookmark_state"			}macro getColumnContent(0) 	   	{  	       return  "bookmark_content"		}macro getColumnFeature(0) 	   	{  	       return  "bookmark_feature"		}macro ParseCsvCfg(hbuf, cur_line, num){	var hbufCvs	var fileCvs	var len		var start, next	var start2, next2	var start3, next3	var start4, next4	var word_1, word_2, word_3, word_4	var csv_1, csv_2, csv_3, csv_4, csv_5, csv_6, csv_7	var csv_8, csv_9, csv_10, csv_11, csv_12, csv_13		var searchCsv	var selCsv	var lineCsv		if(cur_line != "")	{		len = strlen(cur_line)		start  = GetTransCmdS(cur_line,  0,         len)		next   = GetTransCmdE(cur_line,  start,     len)		start2 = GetTransCmdS2(cur_line, next + 1,  len)		next2  = GetTransCmdE(cur_line,  start2,    len)		start3 = GetTransCmdS2(cur_line, next2 + 1, len)		next3  = GetTransCmdE(cur_line,  start3,    len)		start4 = GetTransCmdS2(cur_line, next3 + 1, len)		next4  = GetTransCmdE(cur_line,  start4,    len)		//		word_1 = GetTransStr(cur_line, start, next)		word_2 = GetTransStr(cur_line, start2, next2)		word_3 = GetTransStr(cur_line, start3, next3)		word_4 = GetTransStr(cur_line, start4, next4)		//		TestMsg("word_1 " # word_1 # CharFromKey(13)//			  # "word_2 " # word_2 # CharFromKey(13)//			  # "word_3 " # word_3 # CharFromKey(13)//			  # "word_4 " # word_4 # CharFromKey(13), 2)	}	if(num > 0)	{		tStateT = getMacroValue(hbuf, "tStateT", 1)		tStateF = getMacroValue(hbuf, "tStateF", 1)		tStateV = getMacroValue(hbuf, "tStateV", 1)		tStateC = getMacroValue(hbuf, "tStateC", 1)		if((num == 1 && tStateT != word_2 && tStateF != word_2 && tStateV != word_2 && tStateC != word_2) ||		    (num == 2 && tStateT != word_2 && tStateF != word_2 ) ||		    (num == 3 && tStateV != word_2 && tStateC != word_2 ))		{			SetReg(getColumnName(0), "")			SetReg(getColumnUrl(0), "")			SetReg(getColumnPath(0), "")			SetReg(getColumnAlias(0), "")			word_1 = ""		}//		msg ("@word_2@  @tStateT@  @tStateF@")	}		//read csv	if(word_1 != "" && word_1 != GetReg(getColumnName(0)))	{		fileCvs = ReAllTransHead(hbuf, getBookmarkPath(0))				hbufCvs = OpenExistFile(fileCvs)		if (hNil != hbufCvs)		{			searchCsv = "^" # word_1 # ","			searchCsv = ReplaceWord(searchCsv, "-", "\-")			//SearchInBuf (hbufBase, pattern, lnStart, ichStart, fMatchCase, fRegExp, fWholeWordsOnly)			selCsv = SearchInBuf(hbufCvs, searchCsv, 0, 0, 0, 1, 0)			if (selCsv != nil)			{				lineCsv = GetBufLine(hbufCvs, selCsv.lnLast)				len = strlen(lineCsv)				start  = GetTransCmdS(lineCsv,  0,         len)				next   = GetTransCmdE(lineCsv,  start,     len)				start2 = GetTransCmdS3(lineCsv, next + 1,  len)				next2  = GetTransCmdE(lineCsv,  start2,    len)				start3 = GetTransCmdS3(lineCsv, next2 + 1, len)				next3  = GetTransCmdE(lineCsv,  start3,    len)				start4 = GetTransCmdS3(lineCsv, next3 + 1, len)				next4  = GetTransCmdE(lineCsv,  start4,    len)				//				csv_1 = GetTransStr(lineCsv, start, next)				csv_2 = GetTransStr(lineCsv, start2, next2)				csv_3 = GetTransStr(lineCsv, start3, next3)				csv_4 = GetTransStr(lineCsv, start4, next4)				//				TestMsg("csv_1 " # csv_1 # ","  # next # CharFromKey(13)//					  # "csv_2 " # csv_2 # ","  # next2 # CharFromKey(13)//					  # "csv_3 " # csv_3 # ","  # next3 # CharFromKey(13)//					  # "csv_4 " # csv_4 # ","  # next4 # CharFromKey(13), 0)					  				//				start  = GetTransCmdS3(lineCsv, next4 + 1, len)				next   = GetTransCmdE(lineCsv,  start,     len)				start2 = GetTransCmdS3(lineCsv, next + 1,  len)				next2  = GetTransCmdE(lineCsv,  start2,    len)				start3 = GetTransCmdS3(lineCsv, next2 + 1, len)				next3  = GetTransCmdE(lineCsv,  start3,    len)				start4 = GetTransCmdS3(lineCsv, next3 + 1, len)				next4  = GetTransCmdE(lineCsv,  start4,    len)				//				csv_5 = GetTransStr(lineCsv, start, next)				csv_6 = GetTransStr(lineCsv, start2, next2)				csv_7 = GetTransStr(lineCsv, start3, next3)				csv_8 = GetTransStr(lineCsv, start4, next4)				//				TestMsg("csv_5 " # csv_5 # ","  # next # CharFromKey(13)//					  # "csv_6 " # csv_6 # ","  # next2 # CharFromKey(13)//					  # "csv_7 " # csv_7 # ","  # next3 # CharFromKey(13)//					  # "csv_8 " # csv_8 # ","  # next4 # CharFromKey(13), 0)								//				start  = GetTransCmdS3(lineCsv, next4 + 1, len)				next   = GetTransCmdE(lineCsv,  start,     len)				start2 = GetTransCmdS3(lineCsv, next + 1,  len)				next2  = GetTransCmdE(lineCsv,  start2,    len)				start3 = GetTransCmdS3(lineCsv, next2 + 1, len)				next3  = GetTransCmdE(lineCsv,  start3,    len)				start4 = GetTransCmdS3(lineCsv, next3 + 1, len)				next4  = GetTransCmdE(lineCsv,  start4,    len)				//				csv_9 = GetTransStr(lineCsv, start, next)				csv_10 = GetTransStr(lineCsv, start2, next2)				csv_11 = GetTransStr(lineCsv, start3, next3)				csv_12 = GetTransStr(lineCsv, start4, next4)				//				TestMsg("csv_9 " # csv_9 # ","  # next # CharFromKey(13)//					  # "csv_10 " # csv_10 # ","  # next2 # CharFromKey(13)//					  # "csv_11 " # csv_11 # ","  # next3 # CharFromKey(13)//					  # "csv_12 " # csv_12 # ","  # next4 # CharFromKey(13), 0)				//				//start  = GetTransCmdS3(lineCsv, next4 + 1, len)				//next   = GetTransCmdE(lineCsv,  start,     len)				//				//csv_13 = GetTransStr(lineCsv, start, next)								SetReg(getColumnName(0), csv_1)				SetReg(getColumnUrl(0), csv_2)				SetReg(getColumnPath(0), csv_3)				SetReg(getColumnAlias(0), csv_4)								SetReg(getColumnKey(0), csv_5)				SetReg(getColumnLevel(0), csv_6)				SetReg(getColumnNmLen(0), csv_7)								SetReg(getColumnMap(0), csv_8)				SetReg(getColumnCloud(0), csv_9)				SetReg(getColumnState(0), csv_10)								SetReg(getColumnContent(0), csv_11)				SetReg(getColumnFeature(0), csv_12)			}			CloseBuf(hbufCvs)					}	}	return 0}macro IsDebug(hbuf){	if("Yes" == GetEnv(getDebugString(0)))	{		return 1	}	return 0}macro ShowCsvCfg(hbuf){	var sel	var cur_line	var txt//	PutEnv(getDebugString(0), "Yes")	PutEnv(getDebugString(0), "No")		sel = MGetWndSel(hbuf)	cur_line = GetBufLine(hbuf, sel.lnFirst )	//限制状态1~4	ParseCsvCfg(hbuf, cur_line, 0)	txt =""	txt = txt # GetReg(getColumnName(0)) # "," # GetReg(getColumnAlias(0)) # CharFromKey(13)	txt = txt # GetReg(getColumnKey(0)) # CharFromKey(13)	txt = txt # GetReg(getColumnContent(0)) # "," # GetReg(getColumnFeature(0))		msg ("" # "@txt@")	return 0}macro GoCsvUrl(hbuf){	var sel	var cur_line	var txt		sel = MGetWndSel(hbuf)	cur_line = GetBufLine(hbuf, sel.lnFirst )	//限制状态1~4	ParseCsvCfg(hbuf, cur_line, 1)	if("" == GetReg(getColumnName(0)))	{//		msg("Name is null" # CharFromKey(13)//			# "cur_line: " # cur_line # CharFromKey(13)//			# "Url: " # getColumnUrl(0))		return 0	}	else	{		txt = GetReg(getColumnUrl(0))		if("" != txt)		{			txt = "start chrome.exe " # txt			txt = ReAllTransHead(hbuf, txt)			txt = ReAllKeyHead(hbuf, txt)	//		msg(txt)			NoteInCmd(hbuf, "cmd_f", txt)		}		else		{			msg("url is null")		}		return 1;	}}macro GoCsvPath(hbuf){	var sel	var cur_line	var txt	var ret		sel = MGetWndSel(hbuf)	cur_line = GetBufLine(hbuf, sel.lnFirst )	//限制状态1~2	ParseCsvCfg(hbuf, cur_line, 2)		if("" == GetReg(getColumnName(0)))	{		return 1	}	else	{		txt = GetReg(getColumnPath(0))				if("" != txt)		{			txt = ReAllTransHead(hbuf, txt)			txt = GetTransFileName(hbuf, txt, 5)//			msg(txt)					//作为目录打开			ret = ShellExecute("explore", txt, "", "", 1)			return 1;		}		else		{			msg("url is null")		}		return 0	}	}macro SwitchCsvValue(hbuf){	var sel	var cur_line	var tStateT	var tStateF	var cur_sel	var reVal	var strNew	var lnMax		sel = MGetWndSel(hbuf)	if (IsNoSelect(sel)) //未选择	{		//cur_line = GetBufLine(hbuf, sel.lnFirst )		//ParseCsvCfg(hbuf, cur_line, 3)		//不处理, 有变动时保存		return 0	}	else if(sel.lnFirst == sel.lnLast) // 未多选	{		cur_line = GetBufLine(hbuf, sel.lnFirst )		 //选中最后一行，带换行符会出错		if(strlen(cur_line) < sel.ichLim)			sel.ichLim = sel.ichLim - 1		if(sel.ichFirst == sel.ichLim || 4095 == sel.ichLim)			return 0					tStateT = getMacroValue(hbuf, "tStateT", 1)		tStateF = getMacroValue(hbuf, "tStateF", 1)				cur_sel = strmid(cur_line, sel.ichFirst, sel.ichLim)		if(tStateT == cur_sel || tStateF == cur_sel)		{			if(tStateT == cur_sel)			{				reVal = tStateF			}			else			{				reVal = tStateT			}			strNew = strmid(cur_line,0,sel.ichFirst) # reVal # strmid(cur_line, sel.ichLim, strlen(cur_line))			PutBufLine(hbuf, sel.lnFirst, strNew);			SaveBuf(hbuf)						//parse name			//限制状态3~4			ParseCsvCfg(hbuf, cur_line, 3)			SaveCsvCfg(hbuf, reVal)			return 1		}		//save	}	return 0}macro SaveCsvCfg(hbuf, reVal){	var hbufCvs	var fileCvs	var csv_13	var searchCsv	var selCsv	var txt			if (reVal != GetReg(getColumnState(0)))	{		csv_13 = "### " # GetReg(getColumnName(0)) # ", " # reVal # ","  # GetReg(getColumnFeature(0))				txt = GetReg(getColumnName(0))		txt = txt # "," # GetReg(getColumnUrl(0))		txt = txt # "," # GetReg(getColumnPath(0))		txt = txt # "," # GetReg(getColumnAlias(0))				txt = txt # "," # GetReg(getColumnKey(0))		txt = txt # "," # GetReg(getColumnLevel(0))		txt = txt # "," # GetReg(getColumnNmLen(0))		txt = txt # "," # GetReg(getColumnMap(0))				txt = txt # "," # GetReg(getColumnCloud(0))//		txt = txt # "," # GetReg(getColumnState(0))		txt = txt # "," # reVal		txt = txt # "," # GetReg(getColumnContent(0))		txt = txt # "," # GetReg(getColumnFeature(0))		txt = txt # "," # csv_13		//		msg(txt )				fileCvs = ReAllTransHead(hbuf, getBookmarkPath(0))		hbufCvs = OpenExistFile(fileCvs)		if (hNil != hbufCvs)		{			searchCsv = "^" # GetReg(getColumnName(0)) # ","			//SearchInBuf (hbufBase, pattern, lnStart, ichStart, fMatchCase, fRegExp, fWholeWordsOnly)			selCsv = SearchInBuf(hbufCvs, searchCsv, 0, 0, 0, 1, 0)			if (selCsv != nil)			{				PutBufLine(hbufCvs, selCsv.lnFirst, txt);			}			SaveBuf(hbufCvs)			CloseBuf(hbufCvs)					}		SetReg(getColumnState(0), reVal)	}	return 0}